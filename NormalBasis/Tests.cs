using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NUnit;
using NUnit.Framework;
using NormalBasis;
namespace NormalBasis
{
    class Tests
    {
        [TestFixture]
        public class TestCalculation
        {
            [Test]
            [TestCase("10011101001011010010111010001101100110101010100000101101001001100011010111000110111001101000111011110000001000101101100111101110110101001101110011111110010100110111110011011101010",
                "11101001000110000100110111001001101000101000011101010111001100100000101111001001101010000101000000111010000111100011111001100110101001110001101101001101000101100000100010001111110",
                "01110100001101010110001101000100001110000010111101111010000101000011111000001111010011101101111011001010001111001110011110001000011100111100011110110011010001010111010001010010100")]
            [TestCase("11100001010111000011101101111010100100111001111011100100001110100100100110000011001000111101101101000111000010100100000011111110000010010010010101100011010011011011011011101111101",
                "11011001000000100101000101010110101111011100001010010100001101111101000001000000111010110000101100010001101001110111110110011000101001110111101100101100010110000010011101100010000",
                "00111000010111100110101000101100001011100101110001110000000011011001100111000011110010001101000001010110101011010011110101100110101011100101111001001111000101011001000110001101101")]
            [TestCase("01111101001111101100100100000000101111101001011101011010001101100111000001001110010010001111001101011110111111010111001001111000101000111000010011001110110110111001101101010001010",
                "11010001100001000001000011101000000001000101001100111111100011000011001100110001010110010111001101000111110101000001110100110000010100100010111101011000110001010010111100101111110",
                "10101100101110101101100111101000101110101100010001100101101110100100001101111111000100011000000000011001001010010110111101001000111100011010101110010110000111101011010001111110100")]
            public void AddTest(string pol1, string pol2, string expectedResult)
            {
                int[] a = new int[1];
                int[] b = new int[1];
                a = Field.String_To_Byte(pol1);
                b = Field.String_To_Byte(pol2);
                var actualResult = Field.Byte_To_String(Field.Add(a, b));
                Assert.AreEqual(expectedResult, actualResult);
            }

            [Test]
            [TestCase("00011010001000111011111010100010001111100011100000101111001110100110011110101001010001100000001100000000000010101011000001011011010110011111110101000010100011001100000000100011110",
                "00001101000100011101111101010001000111110001110000010111100111010011001111010100101000110000000110000000000001010101100000101101101011001111111010100001010001100110000000010001111")]
            [TestCase("01100000110100111100011110100100101111101101110001110010001011001100100111111111000010101111100110110011011001100101110001100010010011100110111101001110001110101011111001001101111",
                "10110000011010011110001111010010010111110110111000111001000101100110010011111111100001010111110011011001101100110010111000110001001001110011011110100111000111010101111100100110111")]
            [TestCase("10001001101110110110100100110001101001100000110111100101110011100000011001110010000100010110011000001101101000101010101010101100010000101010101101111111010110011000011100100100000",
                "01000100110111011011010010011000110100110000011011110010111001110000001100111001000010001011001100000110110100010101010101010110001000010101010110111111101011001100001110010010000")]
            [TestCase("10100000100101110000010001101111101100100011100011111010100001101111001110010100111011111110110111000010100110100000001010100111010010001111110111010111000101100101100011110001101",
                "11010000010010111000001000110111110110010001110001111101010000110111100111001010011101111111011011100001010011010000000101010011101001000111111011101011100010110010110001111000110")]

            public void SquareTest(string pol1, string expectedResult)
            {
                int[] a = new int[1];
                a = Field.String_To_Byte(pol1);
                var actualResult = Field.Byte_To_String(Field.ShiftBitToRight(a));
                Assert.AreEqual(expectedResult, actualResult);
            }

            [Test]
            [TestCase("111",1)]
            [TestCase("011",0)]
            [TestCase("101",0)]
            [TestCase("001",1)]

            public void TraceTest(string pol1, int expectedResult)
            {
                int[] a = new int[1];
                a = Field.String_To_Byte(pol1);
                var actualResult =Field.Trace(a);
                Assert.AreEqual(expectedResult, actualResult);
            }

            [Test]
           [TestCase("10111110110000100010000011011101001001101110100101101100010000110001001000000001101000010000110101111101011101011111010011011110101000101011011110010010000101011100101101110111111",
                "11011000110111101101111011101101110110101011110111000000001110100001111110110101011001101101100110111001000110011111100011111011110001110100111111011011001110000101000000101101101",
                "11101110010010000101110110100001100011110010010100101000101011101100100100001110000100100110110100010110010101111101101000010111110001100101110101101001101100100111011101101000110")]
            [TestCase("01101110001010111000000000011011110011110111001010101111100010010110110011010001111101000111111011011100100010111101000100101110010001101001010010101101111100101011010010100011011",
                "00110010011111001011001110001010110000101001011001000000101010110000011110010101100011111010101001101001000111101111100001100101100001010111111110010101011100001000100111001010111",
                "11010011110010110110100010011011010101001101111001010101000110101111100011110110011101111011001110011011111110010111100010011011101100000101100000000111011100001100101010000011101")]
            [TestCase("11010110110000011110111010001011111000101101111011110101111110011010010110100011001001001101101011110111010101010001000011011010111100000101000101101101001100100100101111101010100",
                "00010111001100100010100011101110111000001101001110110110101001011001100001000100011111110100101110110101010100000001111001000001011000011101011000011000100100100100011010101111100",
                "11001111101110101101010010001101100100110100100101001011100010011100000011101100101100110010111011110100000110110111001001001111111011101011001110111011001101111011011010101000000")]
            [TestCase("10011111100101000110100100101111000110011011100010000010010101001011111000000101010001110111101110100100000011110101000100110010101110011101011111101101100000000001010010000011010",
                "10100000000111000000110000110111101010110110001110011011110111000011011011000110110110010000011110001100010100110000111111111101111000001100101001101111010010001111011010001111010",
                "11001101001010011110110000101110100000001001001001101000010011111011110001100110011001010100110011111101001110000001101001100101111100001110011010110010111010001110101111101010011")]
            public void MulTest(string pol1, string pol2, string expectedResult)
            {
                int[] a = new int[1];
                int[] b = new int[1];
                a = Field.String_To_Byte(pol1);
                b = Field.String_To_Byte(pol2);
                var actualResult = Field.Byte_To_String(Field.Mul(a, b));
                Assert.AreEqual(expectedResult, actualResult);
            }

            [Test]
            [TestCase("01101001110101001001000010100101000101010000110110001110100100111001000000010111010100001100011110111010111000111111100111101001100101110110011001010010000000101100101110111101111",
                "00110100111111111011110100110101010100010101101110010100100001001110111010100011100000001010010101000100001101000110111111101010111110110110010010111011110010011001010101101110111",
                "00001001110011100010101010111000001010100100111101000011100010011110111110010110000000110010011000000110111111001110111010101110110111101001111000110010100110100010000100100001010")]
            [TestCase("01100100101110001110001011000111111101000011001000011101100110011101000110111011011010011101101011101100011011000000101111000000110100001000011010010100111101000010110001000001001",
                "10010001101110110011001111110101110111010001000011000101010100011000111000111001111101001111010110000011100100101111000101100110011110010110001100011111001010010000001111111011010",
                "11000001000110100001000001001011100100100101010110010101100110001100111111011111101100111111000010100101110110110010100000101000011011011111010010000100101101101000101011110100111")]
            [TestCase("01111100010011010100011110100111001001010100001110001000110110000110000110010001101111101001010100011100100101110100100101110101011111010000111100101101101001111001000010110101111",
                "11001110110010110010010101011010010010000110000001001100010010101110110110000000111010010110100111010011000010111110001101110101001111001101111110111110100111101101001100100011110",
                "01001010101010111110100110011000010110011111111001011111001011111111011100101111101000001111101000000111111000101000110101111101001101110000111010000101000011001011110011101101011")]
            [TestCase("11001100110111100001000010110010100110110010111100101100000010011000101010101110110110001011110110101001110110111101010000000101100101110101010110101111010010110001101011100101101",
                "10101101111100111111111001101010100000100001001111111010001001001011111101010111111001101101001011010100110111011001101101001101100101110111011001010100100101110100111111010101011",
                "10001001111110010110011011100100011011010110001100100110011111010001111111000011011100110111111010011011011110011000010100101111101101100110010101111001011110111101011001011001101")]

            public void BigPowerTest(string pol1, string n, string expectedResult)
            {
                int[] a = new int[1];
                int[] N = new int[1];
                a = Field.String_To_Byte(pol1);
                N = Field.String_To_Byte(n);
                var actualResult = Field.Byte_To_String(Field.BigPower(a, N));
                Assert.AreEqual(expectedResult, actualResult);
            }
        }
    }
}
