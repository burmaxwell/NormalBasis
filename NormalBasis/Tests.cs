using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NUnit;
using NUnit.Framework;
using NormalBasis;
namespace NormalBasis
{
    class Tests
    {
        [TestFixture]
        public class TestCalculation
        {
            [Test]
            [TestCase("10011101001011010010111010001101100110101010100000101101001001100011010111000110111001101000111011110000001000101101100111101110110101001101110011111110010100110111110011011101010",
                "11101001000110000100110111001001101000101000011101010111001100100000101111001001101010000101000000111010000111100011111001100110101001110001101101001101000101100000100010001111110",
                "01110100001101010110001101000100001110000010111101111010000101000011111000001111010011101101111011001010001111001110011110001000011100111100011110110011010001010111010001010010100")]
            [TestCase("11100001010111000011101101111010100100111001111011100100001110100100100110000011001000111101101101000111000010100100000011111110000010010010010101100011010011011011011011101111101",
                "11011001000000100101000101010110101111011100001010010100001101111101000001000000111010110000101100010001101001110111110110011000101001110111101100101100010110000010011101100010000",
                "00111000010111100110101000101100001011100101110001110000000011011001100111000011110010001101000001010110101011010011110101100110101011100101111001001111000101011001000110001101101")]
            [TestCase("01111101001111101100100100000000101111101001011101011010001101100111000001001110010010001111001101011110111111010111001001111000101000111000010011001110110110111001101101010001010",
                "11010001100001000001000011101000000001000101001100111111100011000011001100110001010110010111001101000111110101000001110100110000010100100010111101011000110001010010111100101111110",
                "10101100101110101101100111101000101110101100010001100101101110100100001101111111000100011000000000011001001010010110111101001000111100011010101110010110000111101011010001111110100")]
            public void AddTest(string pol1, string pol2, string expectedResult)
            {
                int[] a = new int[1];
                int[] b = new int[1];
                a = Field.String_To_Byte(pol1);
                b = Field.String_To_Byte(pol2);
                var actualResult = Field.Byte_To_String(Field.Add(a, b));
                Assert.AreEqual(expectedResult, actualResult);
            }

            [Test]
            [TestCase("100111010010110",
                3,
                "110100111010010")]
            [TestCase("111000010101110000111011011110",
                10,
                "101101111011100001010111000011")]
            [TestCase("01111101001111101100100100000000101111101001011101011010001101100111000",
                23,
                "01011010001101100111000011111010011111011001001000000001011111010010111")]
            public void ShiftBitsToRightTest(string pol1,int step1, string expectedResult)
            {
                int[] a = new int[1];
                a = Field.String_To_Byte(pol1);
                var actualResult = Field.Byte_To_String(Field.ShiftBitsToRight(a, step1));
                Assert.AreEqual(expectedResult, actualResult);
            }

            [Test]
            [TestCase("00011010001000111011111010100010001111100011100000101111001110100110011110101001010001100000001100000000000010101011000001011011010110011111110101000010100011001100000000100011110",
                "00001101000100011101111101010001000111110001110000010111100111010011001111010100101000110000000110000000000001010101100000101101101011001111111010100001010001100110000000010001111")]
            [TestCase("01100000110100111100011110100100101111101101110001110010001011001100100111111111000010101111100110110011011001100101110001100010010011100110111101001110001110101011111001001101111",
                "10110000011010011110001111010010010111110110111000111001000101100110010011111111100001010111110011011001101100110010111000110001001001110011011110100111000111010101111100100110111")]
            [TestCase("10001001101110110110100100110001101001100000110111100101110011100000011001110010000100010110011000001101101000101010101010101100010000101010101101111111010110011000011100100100000",
                "01000100110111011011010010011000110100110000011011110010111001110000001100111001000010001011001100000110110100010101010101010110001000010101010110111111101011001100001110010010000")]
            [TestCase("10100000100101110000010001101111101100100011100011111010100001101111001110010100111011111110110111000010100110100000001010100111010010001111110111010111000101100101100011110001101",
                "11010000010010111000001000110111110110010001110001111101010000110111100111001010011101111111011011100001010011010000000101010011101001000111111011101011100010110010110001111000110")]

            public void SquareTest(string pol1, string expectedResult)
            {
                int[] a = new int[1];
                a = Field.String_To_Byte(pol1);
                var actualResult = Field.Byte_To_String(Field.ShiftBitToRight(a));
                Assert.AreEqual(expectedResult, actualResult);
            }







        }
    }
}
